{"ast":null,"code":"class Auth {\n  constructor() {\n    this._baseUrl = 'https://auth.nomoreparties.co';\n  }\n\n  register(pass, email) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: 'POST',\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        pass,\n        email\n      })\n    }).then(res => {\n      try {\n        if (res.status === 200) {\n          return res.json();\n        }\n      } catch (err) {\n        return err;\n      }\n    }).then(res => {\n      return res;\n    }).catch(err => console.log(err));\n  }\n\n  singIn(pass, email) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: 'POST',\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        \"password\": pass,\n        \"email\": email\n      })\n    }).then(res => res.json()).then(data => localStorage.setItem('token', data.token)).catch(err => console.log(err));\n  }\n\n  tokenCheck(jwt) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n      }\n    }).then(res => res.json()).catch(err => console.log(err));\n  }\n\n}\n\nexport const auth = new Auth();","map":{"version":3,"sources":["C:/dev/mesto-react/src/utils/Auth.js"],"names":["Auth","constructor","_baseUrl","register","pass","email","fetch","method","headers","body","JSON","stringify","then","res","status","json","err","catch","console","log","singIn","data","localStorage","setItem","token","tokenCheck","jwt","getItem","auth"],"mappings":"AAAA,MAAMA,IAAN,CAAW;AACTC,EAAAA,WAAW,GAAG;AACZ,SAAKC,QAAL,GAAgB,+BAAhB;AACD;;AAEDC,EAAAA,QAAQ,CAACC,IAAD,EAAOC,KAAP,EAAc;AACpB,WAAOC,KAAK,CAAE,GAAE,KAAKJ,QAAS,SAAlB,EAA4B;AACtCK,MAAAA,MAAM,EAAE,MAD8B;AAEtCC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF6B;AAGtCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEP,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAf;AAHgC,KAA5B,CAAL,CAKJO,IALI,CAKEC,GAAD,IAAS;AACb,UAAI;AACF,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAuB;AACrB,iBAAOD,GAAG,CAACE,IAAJ,EAAP;AACD;AACF,OAJD,CAIE,OAAMC,GAAN,EAAU;AACV,eAAQA,GAAR;AACD;AACF,KAbI,EAcJJ,IAdI,CAcCC,GAAG,IAAI;AACX,aAAOA,GAAP;AACD,KAhBI,EAiBJI,KAjBI,CAiBED,GAAG,IAAIE,OAAO,CAACC,GAAR,CAAYH,GAAZ,CAjBT,CAAP;AAkBD;;AAEDI,EAAAA,MAAM,CAAChB,IAAD,EAAOC,KAAP,EAAc;AAClB,WAAOC,KAAK,CAAE,GAAE,KAAKJ,QAAS,SAAlB,EAA4B;AACtCK,MAAAA,MAAM,EAAE,MAD8B;AAEtCC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF6B;AAGtCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB,oBAAYP,IADO;AAEnB,iBAASC;AAFU,OAAf;AAHgC,KAA5B,CAAL,CAQJO,IARI,CAQCC,GAAG,IAAIA,GAAG,CAACE,IAAJ,EARR,EASJH,IATI,CASCS,IAAI,IAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,KAAnC,CATT,EAUJP,KAVI,CAUED,GAAG,IAAIE,OAAO,CAACC,GAAR,CAAYH,GAAZ,CAVT,CAAP;AAWD;;AAEDS,EAAAA,UAAU,CAACC,GAAD,EAAM;AACd,WAAOpB,KAAK,CAAE,GAAE,KAAKJ,QAAS,WAAlB,EAA8B;AACxCK,MAAAA,MAAM,EAAE,KADgC;AAExCC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,yBAAkB,UAASc,YAAY,CAACK,OAAb,CAAqB,OAArB,CAA8B;AAFlD;AAF+B,KAA9B,CAAL,CAOJf,IAPI,CAOCC,GAAG,IAAIA,GAAG,CAACE,IAAJ,EAPR,EAQJE,KARI,CAQED,GAAG,IAAIE,OAAO,CAACC,GAAR,CAAYH,GAAZ,CART,CAAP;AASD;;AAlDQ;;AAqDX,OAAO,MAAMY,IAAI,GAAG,IAAI5B,IAAJ,EAAb","sourcesContent":["class Auth {\n  constructor() {\n    this._baseUrl = 'https://auth.nomoreparties.co'\n  }\n\n  register(pass, email) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: 'POST',\n      headers: { \"content-type\": \"application/json\" },\n      body: JSON.stringify({ pass, email })\n    })\n      .then((res) => {\n        try {\n          if (res.status === 200){\n            return res.json();\n          }\n        } catch(err){\n          return (err);\n        }\n      })\n      .then(res => {\n        return res;\n      })\n      .catch(err => console.log(err))\n  }\n\n  singIn(pass, email) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: 'POST',\n      headers: { \"content-type\": \"application/json\" },\n      body: JSON.stringify({\n        \"password\": pass,\n        \"email\": email\n      })\n    })\n      .then(res => res.json())\n      .then(data => localStorage.setItem('token', data.token))\n      .catch(err => console.log(err))\n  }\n\n  tokenCheck(jwt) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: {\n        \"Content-type\": \"application/json\",\n        \"Authorization\": `Bearer ${localStorage.getItem('token')}`\n      }\n    })\n      .then(res => res.json())\n      .catch(err => console.log(err))\n  }\n}\n\nexport const auth = new Auth();\n"]},"metadata":{},"sourceType":"module"}