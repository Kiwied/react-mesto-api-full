{"ast":null,"code":"import { apiInfo } from \"./utils.js\";\n\nclass Api {\n  constructor({\n    baseUrl,\n    headers\n  }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _checkResponseData(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    }).then(res => this._checkResponseData(res));\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    }).then(res => this._checkResponseData(res));\n  }\n\n  setNewUserInfo({\n    name,\n    about\n  }) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(res => this._checkResponseData(res));\n  }\n\n  setNewAvatar({\n    avatar\n  }) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(res => this._checkResponseData(res));\n  }\n\n  addNewCard({\n    name,\n    link\n  }) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(res => this._checkResponseData(res));\n  }\n\n  like(cardId) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => this._checkResponseData(res));\n  }\n\n  dislike(cardId) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._checkResponseData(res));\n  }\n\n  delete(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._checkResponseData(res));\n  }\n\n}\n\nexport const api = new Api(apiInfo);","map":{"version":3,"sources":["C:/dev/mesto-react/src/utils/Api.js"],"names":["apiInfo","Api","constructor","baseUrl","headers","_baseUrl","_headers","_checkResponseData","res","ok","json","Promise","reject","status","getInitialCards","fetch","then","getUserInfo","setNewUserInfo","name","about","method","body","JSON","stringify","setNewAvatar","avatar","addNewCard","link","like","cardId","dislike","delete","api"],"mappings":"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","sourcesContent":["import { apiInfo } from \"./utils.js\";\n\nclass Api {\n  constructor({ baseUrl, headers }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _checkResponseData(res) {\n    if (res.ok) {\n      return res.json()\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: this._headers\n    })\n      .then(res => this._checkResponseData(res))\n  }\n\n  getUserInfo() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: this._headers\n    })\n      .then(res => this._checkResponseData(res))\n  }\n\n  setNewUserInfo({ name, about }) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    })\n      .then(res => this._checkResponseData(res))\n  }\n\n  setNewAvatar({ avatar }) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    })\n      .then(res => this._checkResponseData(res))\n  }\n\n  addNewCard({ name, link }) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    })\n      .then(res => this._checkResponseData(res))\n  }\n\n  like(cardId) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: this._headers\n    })\n      .then(res => this._checkResponseData(res))\n  }\n\n  dislike(cardId) {\n    return fetch(`${this._baseUrl}/cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    })\n      .then(res => this._checkResponseData(res))\n  }\n\n  delete(cardId) {\n    return fetch(`${this._baseUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this._headers\n    })\n      .then(res => this._checkResponseData(res))\n  }\n}\n\nexport const api = new Api(apiInfo);\n\n\n"]},"metadata":{},"sourceType":"module"}